{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Econ 441B \n",
        "<br>Li Hwan Kao\n",
        "<br>106088468**"
      ],
      "metadata": {
        "id": "F4XSl3xK8WKy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 0.) Import the US Perminent Visas using zip extractor"
      ],
      "metadata": {
        "id": "7ywSRtNI4s5h"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "nsG1QV154GYZ"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from google.colab import drive\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "drive.mount('/content/gdrive/', force_remount = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iku0T8Ou4Lcu",
        "outputId": "53731f64-c18f-4081-e6bc-f00e5f35b64a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reading data form a zip file reduces amoung of storage used."
      ],
      "metadata": {
        "id": "8mECXiCSthME"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "\n",
        "zf = zipfile.ZipFile(\"/content/gdrive/MyDrive/Econ441B/us_perm_visas.csv.zip\") \n",
        "df = pd.read_csv(zf.open('us_perm_visas.csv'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q7XmCWs_rULl",
        "outputId": "ed771a94-0a56-4c15-f630-07ad21013b17"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py:3326: DtypeWarning: Columns (0,1,2,3,4,5,6,7,10,11,16,17,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,47,48,49,50,51,52,53,55,56,57,58,59,60,61,63,64,65,66,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153) have mixed types.Specify dtype option on import or set low_memory=False.\n",
            "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jA7Kj7hGFRKr"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.) US perm Visas csv from cycle using zip extractor\n"
      ],
      "metadata": {
        "id": "8VsnpGe9-B3p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "id": "JvCzIdgO983i",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 783
        },
        "outputId": "85fa8752-e71e-41ef-87ad-d4e8984f2179"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       add_these_pw_job_title_9089   agent_city  \\\n",
              "0                              NaN          NaN   \n",
              "1                              NaN          NaN   \n",
              "2                              NaN          NaN   \n",
              "3                              NaN          NaN   \n",
              "4                              NaN          NaN   \n",
              "...                            ...          ...   \n",
              "374357                         NaN   Buena Park   \n",
              "374358                         NaN      Seattle   \n",
              "374359                         NaN   Schaumburg   \n",
              "374360                         NaN  LOS ANGELES   \n",
              "374361                         NaN      Phoenix   \n",
              "\n",
              "                                          agent_firm_name agent_state  \\\n",
              "0                                                     NaN         NaN   \n",
              "1                                                     NaN         NaN   \n",
              "2                                                     NaN         NaN   \n",
              "3                                                     NaN         NaN   \n",
              "4                                                     NaN         NaN   \n",
              "...                                                   ...         ...   \n",
              "374357                           Law Offices of Yohan Lee          CA   \n",
              "374358                         MacDonald Hoague & Bayless          WA   \n",
              "374359  International Legal and Business Services Grou...          IL   \n",
              "374360                        LAW OFFICES OF JAMES S HONG          CA   \n",
              "374361            Fragomen, Del Rey, Bernsen & Loewy, LLP          AZ   \n",
              "\n",
              "       application_type        case_no    case_number case_received_date  \\\n",
              "0                  PERM  A-07323-97014            NaN                NaN   \n",
              "1                  PERM  A-07332-99439            NaN                NaN   \n",
              "2                  PERM  A-07333-99643            NaN                NaN   \n",
              "3                  PERM  A-07339-01930            NaN                NaN   \n",
              "4                  PERM  A-07345-03565            NaN                NaN   \n",
              "...                 ...            ...            ...                ...   \n",
              "374357              NaN            NaN  A-16363-85407         2016-12-29   \n",
              "374358              NaN            NaN  A-16271-56745         2016-12-30   \n",
              "374359              NaN            NaN  A-16354-82345         2016-12-30   \n",
              "374360              NaN            NaN  A-16357-84250         2016-12-30   \n",
              "374361              NaN            NaN  A-16279-59292         2016-12-30   \n",
              "\n",
              "       case_status class_of_admission  ... ri_pvt_employment_firm_to  \\\n",
              "0        Certified                J-1  ...                       NaN   \n",
              "1           Denied                B-2  ...                       NaN   \n",
              "2        Certified               H-1B  ...                       NaN   \n",
              "3        Certified                B-2  ...                       NaN   \n",
              "4        Certified                L-1  ...                       NaN   \n",
              "...            ...                ...  ...                       ...   \n",
              "374357   Withdrawn                NaN  ...                       NaN   \n",
              "374358   Withdrawn                L-1  ...                       NaN   \n",
              "374359   Withdrawn               H-1B  ...                       NaN   \n",
              "374360   Withdrawn                B-2  ...                       NaN   \n",
              "374361   Withdrawn               H-1B  ...                       NaN   \n",
              "\n",
              "       ri_us_workers_considered schd_a_sheepherder     us_economic_sector  \\\n",
              "0                           NaN                NaN                     IT   \n",
              "1                           NaN                NaN  Other Economic Sector   \n",
              "2                           NaN                NaN              Aerospace   \n",
              "3                           NaN                NaN  Other Economic Sector   \n",
              "4                           NaN                NaN           Advanced Mfg   \n",
              "...                         ...                ...                    ...   \n",
              "374357                      NaN                  N                    NaN   \n",
              "374358                        Y                  N                    NaN   \n",
              "374359                      NaN                  N                    NaN   \n",
              "374360                      NaN                  N                    NaN   \n",
              "374361                      NaN                  N                    NaN   \n",
              "\n",
              "       wage_offer_from_9089 wage_offer_to_9089 wage_offer_unit_of_pay_9089  \\\n",
              "0                   75629.0                NaN                          yr   \n",
              "1                   37024.0                NaN                          yr   \n",
              "2                   47923.0                NaN                          yr   \n",
              "3                     10.97                NaN                          hr   \n",
              "4                  100000.0                NaN                          yr   \n",
              "...                     ...                ...                         ...   \n",
              "374357            28,330.00                NaN                        Year   \n",
              "374358           122,000.00         142,000.00                        Year   \n",
              "374359            79,082.00          79,082.00                        Year   \n",
              "374360            37,981.00                NaN                        Year   \n",
              "374361            84,926.00         121,500.00                        Year   \n",
              "\n",
              "       wage_offered_from_9089 wage_offered_to_9089  \\\n",
              "0                         NaN                  NaN   \n",
              "1                         NaN                  NaN   \n",
              "2                         NaN                  NaN   \n",
              "3                         NaN                  NaN   \n",
              "4                         NaN                  NaN   \n",
              "...                       ...                  ...   \n",
              "374357                    NaN                  NaN   \n",
              "374358                    NaN                  NaN   \n",
              "374359                    NaN                  NaN   \n",
              "374360                    NaN                  NaN   \n",
              "374361                    NaN                  NaN   \n",
              "\n",
              "        wage_offered_unit_of_pay_9089  \n",
              "0                                 NaN  \n",
              "1                                 NaN  \n",
              "2                                 NaN  \n",
              "3                                 NaN  \n",
              "4                                 NaN  \n",
              "...                               ...  \n",
              "374357                            NaN  \n",
              "374358                            NaN  \n",
              "374359                            NaN  \n",
              "374360                            NaN  \n",
              "374361                            NaN  \n",
              "\n",
              "[374362 rows x 154 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f907d9c0-db67-4292-b13c-692b8f9cdfe8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>add_these_pw_job_title_9089</th>\n",
              "      <th>agent_city</th>\n",
              "      <th>agent_firm_name</th>\n",
              "      <th>agent_state</th>\n",
              "      <th>application_type</th>\n",
              "      <th>case_no</th>\n",
              "      <th>case_number</th>\n",
              "      <th>case_received_date</th>\n",
              "      <th>case_status</th>\n",
              "      <th>class_of_admission</th>\n",
              "      <th>...</th>\n",
              "      <th>ri_pvt_employment_firm_to</th>\n",
              "      <th>ri_us_workers_considered</th>\n",
              "      <th>schd_a_sheepherder</th>\n",
              "      <th>us_economic_sector</th>\n",
              "      <th>wage_offer_from_9089</th>\n",
              "      <th>wage_offer_to_9089</th>\n",
              "      <th>wage_offer_unit_of_pay_9089</th>\n",
              "      <th>wage_offered_from_9089</th>\n",
              "      <th>wage_offered_to_9089</th>\n",
              "      <th>wage_offered_unit_of_pay_9089</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>PERM</td>\n",
              "      <td>A-07323-97014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Certified</td>\n",
              "      <td>J-1</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IT</td>\n",
              "      <td>75629.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>yr</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>PERM</td>\n",
              "      <td>A-07332-99439</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Denied</td>\n",
              "      <td>B-2</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Other Economic Sector</td>\n",
              "      <td>37024.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>yr</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>PERM</td>\n",
              "      <td>A-07333-99643</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Certified</td>\n",
              "      <td>H-1B</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Aerospace</td>\n",
              "      <td>47923.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>yr</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>PERM</td>\n",
              "      <td>A-07339-01930</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Certified</td>\n",
              "      <td>B-2</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Other Economic Sector</td>\n",
              "      <td>10.97</td>\n",
              "      <td>NaN</td>\n",
              "      <td>hr</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>PERM</td>\n",
              "      <td>A-07345-03565</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Certified</td>\n",
              "      <td>L-1</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Advanced Mfg</td>\n",
              "      <td>100000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>yr</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374357</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Buena Park</td>\n",
              "      <td>Law Offices of Yohan Lee</td>\n",
              "      <td>CA</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>A-16363-85407</td>\n",
              "      <td>2016-12-29</td>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>N</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28,330.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Year</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374358</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Seattle</td>\n",
              "      <td>MacDonald Hoague &amp; Bayless</td>\n",
              "      <td>WA</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>A-16271-56745</td>\n",
              "      <td>2016-12-30</td>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>L-1</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Y</td>\n",
              "      <td>N</td>\n",
              "      <td>NaN</td>\n",
              "      <td>122,000.00</td>\n",
              "      <td>142,000.00</td>\n",
              "      <td>Year</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374359</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Schaumburg</td>\n",
              "      <td>International Legal and Business Services Grou...</td>\n",
              "      <td>IL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>A-16354-82345</td>\n",
              "      <td>2016-12-30</td>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>H-1B</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>N</td>\n",
              "      <td>NaN</td>\n",
              "      <td>79,082.00</td>\n",
              "      <td>79,082.00</td>\n",
              "      <td>Year</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374360</th>\n",
              "      <td>NaN</td>\n",
              "      <td>LOS ANGELES</td>\n",
              "      <td>LAW OFFICES OF JAMES S HONG</td>\n",
              "      <td>CA</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>A-16357-84250</td>\n",
              "      <td>2016-12-30</td>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>B-2</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>N</td>\n",
              "      <td>NaN</td>\n",
              "      <td>37,981.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Year</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374361</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Phoenix</td>\n",
              "      <td>Fragomen, Del Rey, Bernsen &amp; Loewy, LLP</td>\n",
              "      <td>AZ</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>A-16279-59292</td>\n",
              "      <td>2016-12-30</td>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>H-1B</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>N</td>\n",
              "      <td>NaN</td>\n",
              "      <td>84,926.00</td>\n",
              "      <td>121,500.00</td>\n",
              "      <td>Year</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>374362 rows × 154 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f907d9c0-db67-4292-b13c-692b8f9cdfe8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f907d9c0-db67-4292-b13c-692b8f9cdfe8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f907d9c0-db67-4292-b13c-692b8f9cdfe8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "f7APv9N3986a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0758096d-1f8f-495f-be2c-0fa33a5515c2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['add_these_pw_job_title_9089', 'agent_city', 'agent_firm_name',\n",
              "       'agent_state', 'application_type', 'case_no', 'case_number',\n",
              "       'case_received_date', 'case_status', 'class_of_admission',\n",
              "       ...\n",
              "       'ri_pvt_employment_firm_to', 'ri_us_workers_considered',\n",
              "       'schd_a_sheepherder', 'us_economic_sector', 'wage_offer_from_9089',\n",
              "       'wage_offer_to_9089', 'wage_offer_unit_of_pay_9089',\n",
              "       'wage_offered_from_9089', 'wage_offered_to_9089',\n",
              "       'wage_offered_unit_of_pay_9089'],\n",
              "      dtype='object', length=154)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in df.columns:\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qgRqi4s8uM8l",
        "outputId": "a56bd2aa-9a95-456e-f855-078b97944b45"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "add_these_pw_job_title_9089\n",
            "agent_city\n",
            "agent_firm_name\n",
            "agent_state\n",
            "application_type\n",
            "case_no\n",
            "case_number\n",
            "case_received_date\n",
            "case_status\n",
            "class_of_admission\n",
            "country_of_citizenship\n",
            "country_of_citzenship\n",
            "decision_date\n",
            "employer_address_1\n",
            "employer_address_2\n",
            "employer_city\n",
            "employer_country\n",
            "employer_decl_info_title\n",
            "employer_name\n",
            "employer_num_employees\n",
            "employer_phone\n",
            "employer_phone_ext\n",
            "employer_postal_code\n",
            "employer_state\n",
            "employer_yr_estab\n",
            "foreign_worker_info_alt_edu_experience\n",
            "foreign_worker_info_birth_country\n",
            "foreign_worker_info_city\n",
            "foreign_worker_info_education\n",
            "foreign_worker_info_education_other\n",
            "foreign_worker_info_inst\n",
            "foreign_worker_info_major\n",
            "foreign_worker_info_postal_code\n",
            "foreign_worker_info_rel_occup_exp\n",
            "foreign_worker_info_req_experience\n",
            "foreign_worker_info_state\n",
            "foreign_worker_info_training_comp\n",
            "foreign_worker_ownership_interest\n",
            "foreign_worker_yr_rel_edu_completed\n",
            "fw_info_alt_edu_experience\n",
            "fw_info_birth_country\n",
            "fw_info_education_other\n",
            "fw_info_postal_code\n",
            "fw_info_rel_occup_exp\n",
            "fw_info_req_experience\n",
            "fw_info_training_comp\n",
            "fw_info_yr_rel_edu_completed\n",
            "fw_ownership_interest\n",
            "ji_foreign_worker_live_on_premises\n",
            "ji_fw_live_on_premises\n",
            "ji_live_in_dom_svc_contract\n",
            "ji_live_in_domestic_service\n",
            "ji_offered_to_sec_j_foreign_worker\n",
            "ji_offered_to_sec_j_fw\n",
            "job_info_alt_cmb_ed_oth_yrs\n",
            "job_info_alt_combo_ed\n",
            "job_info_alt_combo_ed_exp\n",
            "job_info_alt_combo_ed_other\n",
            "job_info_alt_field\n",
            "job_info_alt_field_name\n",
            "job_info_alt_occ\n",
            "job_info_alt_occ_job_title\n",
            "job_info_alt_occ_num_months\n",
            "job_info_combo_occupation\n",
            "job_info_education\n",
            "job_info_education_other\n",
            "job_info_experience\n",
            "job_info_experience_num_months\n",
            "job_info_foreign_ed\n",
            "job_info_foreign_lang_req\n",
            "job_info_job_req_normal\n",
            "job_info_job_title\n",
            "job_info_major\n",
            "job_info_training\n",
            "job_info_training_field\n",
            "job_info_training_num_months\n",
            "job_info_work_city\n",
            "job_info_work_postal_code\n",
            "job_info_work_state\n",
            "naics_2007_us_code\n",
            "naics_2007_us_title\n",
            "naics_code\n",
            "naics_title\n",
            "naics_us_code\n",
            "naics_us_code_2007\n",
            "naics_us_title\n",
            "naics_us_title_2007\n",
            "orig_case_no\n",
            "orig_file_date\n",
            "preparer_info_emp_completed\n",
            "preparer_info_title\n",
            "pw_amount_9089\n",
            "pw_determ_date\n",
            "pw_expire_date\n",
            "pw_job_title_908\n",
            "pw_job_title_9089\n",
            "pw_level_9089\n",
            "pw_soc_code\n",
            "pw_soc_title\n",
            "pw_source_name_9089\n",
            "pw_source_name_other_9089\n",
            "pw_track_num\n",
            "pw_unit_of_pay_9089\n",
            "rec_info_barg_rep_notified\n",
            "recr_info_barg_rep_notified\n",
            "recr_info_coll_teach_comp_proc\n",
            "recr_info_coll_univ_teacher\n",
            "recr_info_employer_rec_payment\n",
            "recr_info_first_ad_start\n",
            "recr_info_job_fair_from\n",
            "recr_info_job_fair_to\n",
            "recr_info_on_campus_recr_from\n",
            "recr_info_on_campus_recr_to\n",
            "recr_info_pro_org_advert_from\n",
            "recr_info_pro_org_advert_to\n",
            "recr_info_prof_org_advert_from\n",
            "recr_info_prof_org_advert_to\n",
            "recr_info_professional_occ\n",
            "recr_info_radio_tv_ad_from\n",
            "recr_info_radio_tv_ad_to\n",
            "recr_info_second_ad_start\n",
            "recr_info_sunday_newspaper\n",
            "recr_info_swa_job_order_end\n",
            "recr_info_swa_job_order_start\n",
            "refile\n",
            "ri_1st_ad_newspaper_name\n",
            "ri_2nd_ad_newspaper_name\n",
            "ri_2nd_ad_newspaper_or_journal\n",
            "ri_campus_placement_from\n",
            "ri_campus_placement_to\n",
            "ri_coll_tch_basic_process\n",
            "ri_coll_teach_pro_jnl\n",
            "ri_coll_teach_select_date\n",
            "ri_employee_referral_prog_from\n",
            "ri_employee_referral_prog_to\n",
            "ri_employer_web_post_from\n",
            "ri_employer_web_post_to\n",
            "ri_job_search_website_from\n",
            "ri_job_search_website_to\n",
            "ri_layoff_in_past_six_months\n",
            "ri_local_ethnic_paper_from\n",
            "ri_local_ethnic_paper_to\n",
            "ri_posted_notice_at_worksite\n",
            "ri_pvt_employment_firm_from\n",
            "ri_pvt_employment_firm_to\n",
            "ri_us_workers_considered\n",
            "schd_a_sheepherder\n",
            "us_economic_sector\n",
            "wage_offer_from_9089\n",
            "wage_offer_to_9089\n",
            "wage_offer_unit_of_pay_9089\n",
            "wage_offered_from_9089\n",
            "wage_offered_to_9089\n",
            "wage_offered_unit_of_pay_9089\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2.) Choose 4 features you think are important. Case_status is your target variable\n"
      ],
      "metadata": {
        "id": "lbkpNPyN-Gnk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_select = df[[\"case_status\"]]"
      ],
      "metadata": {
        "id": "cNu6ysyV988v"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_select"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "hiDhVt1u0y4O",
        "outputId": "d2245173-bde4-43ee-edf0-4081345f3f04"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       case_status\n",
              "0        Certified\n",
              "1           Denied\n",
              "2        Certified\n",
              "3        Certified\n",
              "4        Certified\n",
              "...            ...\n",
              "374357   Withdrawn\n",
              "374358   Withdrawn\n",
              "374359   Withdrawn\n",
              "374360   Withdrawn\n",
              "374361   Withdrawn\n",
              "\n",
              "[374362 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17428d3c-1952-4548-90bf-580f56f62fbc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>case_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Certified</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Denied</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Certified</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Certified</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Certified</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374357</th>\n",
              "      <td>Withdrawn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374358</th>\n",
              "      <td>Withdrawn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374359</th>\n",
              "      <td>Withdrawn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374360</th>\n",
              "      <td>Withdrawn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374361</th>\n",
              "      <td>Withdrawn</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>374362 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17428d3c-1952-4548-90bf-580f56f62fbc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-17428d3c-1952-4548-90bf-580f56f62fbc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-17428d3c-1952-4548-90bf-580f56f62fbc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_admission = pd.get_dummies(df['class_of_admission'])\n",
        "df_economic = pd.get_dummies(df['us_economic_sector'])\n",
        "\n",
        "df_new = pd.concat([df_select, df_admission, df_economic], axis=1)\n",
        "print(df_new)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E6VURtk50bLv",
        "outputId": "d1efa026-4c36-44da-96e6-68a838af5796"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       case_status  A-3  A1/A2  AOS  AOS/H-1B  B-1  B-2  C-1  C-3  D-1  ...  \\\n",
            "0        Certified    0      0    0         0    0    0    0    0    0  ...   \n",
            "1           Denied    0      0    0         0    0    1    0    0    0  ...   \n",
            "2        Certified    0      0    0         0    0    0    0    0    0  ...   \n",
            "3        Certified    0      0    0         0    0    1    0    0    0  ...   \n",
            "4        Certified    0      0    0         0    0    0    0    0    0  ...   \n",
            "...            ...  ...    ...  ...       ...  ...  ...  ...  ...  ...  ...   \n",
            "374357   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
            "374358   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
            "374359   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
            "374360   Withdrawn    0      0    0         0    0    1    0    0    0  ...   \n",
            "374361   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
            "\n",
            "        Energy  Finance  Geospatial  Health Care  Homeland Security  \\\n",
            "0            0        0           0            0                  0   \n",
            "1            0        0           0            0                  0   \n",
            "2            0        0           0            0                  0   \n",
            "3            0        0           0            0                  0   \n",
            "4            0        0           0            0                  0   \n",
            "...        ...      ...         ...          ...                ...   \n",
            "374357       0        0           0            0                  0   \n",
            "374358       0        0           0            0                  0   \n",
            "374359       0        0           0            0                  0   \n",
            "374360       0        0           0            0                  0   \n",
            "374361       0        0           0            0                  0   \n",
            "\n",
            "        Hospitality  IT  Other Economic Sector  Retail  Transportation  \n",
            "0                 0   1                      0       0               0  \n",
            "1                 0   0                      1       0               0  \n",
            "2                 0   0                      0       0               0  \n",
            "3                 0   0                      1       0               0  \n",
            "4                 0   0                      0       0               0  \n",
            "...             ...  ..                    ...     ...             ...  \n",
            "374357            0   0                      0       0               0  \n",
            "374358            0   0                      0       0               0  \n",
            "374359            0   0                      0       0               0  \n",
            "374360            0   0                      0       0               0  \n",
            "374361            0   0                      0       0               0  \n",
            "\n",
            "[374362 rows x 75 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_new"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "aV9JyTO90bOQ",
        "outputId": "a58d63e6-1c2c-4ec7-feb0-d3a6c54c1942"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       case_status  A-3  A1/A2  AOS  AOS/H-1B  B-1  B-2  C-1  C-3  D-1  ...  \\\n",
              "0        Certified    0      0    0         0    0    0    0    0    0  ...   \n",
              "1           Denied    0      0    0         0    0    1    0    0    0  ...   \n",
              "2        Certified    0      0    0         0    0    0    0    0    0  ...   \n",
              "3        Certified    0      0    0         0    0    1    0    0    0  ...   \n",
              "4        Certified    0      0    0         0    0    0    0    0    0  ...   \n",
              "...            ...  ...    ...  ...       ...  ...  ...  ...  ...  ...  ...   \n",
              "374357   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
              "374358   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
              "374359   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
              "374360   Withdrawn    0      0    0         0    0    1    0    0    0  ...   \n",
              "374361   Withdrawn    0      0    0         0    0    0    0    0    0  ...   \n",
              "\n",
              "        Energy  Finance  Geospatial  Health Care  Homeland Security  \\\n",
              "0            0        0           0            0                  0   \n",
              "1            0        0           0            0                  0   \n",
              "2            0        0           0            0                  0   \n",
              "3            0        0           0            0                  0   \n",
              "4            0        0           0            0                  0   \n",
              "...        ...      ...         ...          ...                ...   \n",
              "374357       0        0           0            0                  0   \n",
              "374358       0        0           0            0                  0   \n",
              "374359       0        0           0            0                  0   \n",
              "374360       0        0           0            0                  0   \n",
              "374361       0        0           0            0                  0   \n",
              "\n",
              "        Hospitality  IT  Other Economic Sector  Retail  Transportation  \n",
              "0                 0   1                      0       0               0  \n",
              "1                 0   0                      1       0               0  \n",
              "2                 0   0                      0       0               0  \n",
              "3                 0   0                      1       0               0  \n",
              "4                 0   0                      0       0               0  \n",
              "...             ...  ..                    ...     ...             ...  \n",
              "374357            0   0                      0       0               0  \n",
              "374358            0   0                      0       0               0  \n",
              "374359            0   0                      0       0               0  \n",
              "374360            0   0                      0       0               0  \n",
              "374361            0   0                      0       0               0  \n",
              "\n",
              "[374362 rows x 75 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f907a923-043c-416a-9c5c-e658607ba377\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>case_status</th>\n",
              "      <th>A-3</th>\n",
              "      <th>A1/A2</th>\n",
              "      <th>AOS</th>\n",
              "      <th>AOS/H-1B</th>\n",
              "      <th>B-1</th>\n",
              "      <th>B-2</th>\n",
              "      <th>C-1</th>\n",
              "      <th>C-3</th>\n",
              "      <th>D-1</th>\n",
              "      <th>...</th>\n",
              "      <th>Energy</th>\n",
              "      <th>Finance</th>\n",
              "      <th>Geospatial</th>\n",
              "      <th>Health Care</th>\n",
              "      <th>Homeland Security</th>\n",
              "      <th>Hospitality</th>\n",
              "      <th>IT</th>\n",
              "      <th>Other Economic Sector</th>\n",
              "      <th>Retail</th>\n",
              "      <th>Transportation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Certified</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Denied</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Certified</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Certified</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Certified</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374357</th>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374358</th>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374359</th>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374360</th>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374361</th>\n",
              "      <td>Withdrawn</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>374362 rows × 75 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f907a923-043c-416a-9c5c-e658607ba377')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f907a923-043c-416a-9c5c-e658607ba377 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f907a923-043c-416a-9c5c-e658607ba377');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "D7n_cImg99F3"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3.) Clean your data for a decision tree\n"
      ],
      "metadata": {
        "id": "bIJx2jvD-KEI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_new.drop('case_status', axis = 1)\n",
        "y = df['case_status']"
      ],
      "metadata": {
        "id": "NvwomEoaGAgN"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "id": "AwXa-bvX99Id",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "outputId": "014d78e8-7daa-4424-efbe-87a2097a5aa0"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        A-3  A1/A2  AOS  AOS/H-1B  B-1  B-2  C-1  C-3  D-1  E-1  ...  Energy  \\\n",
              "0         0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "1         0      0    0         0    0    1    0    0    0    0  ...       0   \n",
              "2         0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "3         0      0    0         0    0    1    0    0    0    0  ...       0   \n",
              "4         0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "...     ...    ...  ...       ...  ...  ...  ...  ...  ...  ...  ...     ...   \n",
              "374357    0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "374358    0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "374359    0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "374360    0      0    0         0    0    1    0    0    0    0  ...       0   \n",
              "374361    0      0    0         0    0    0    0    0    0    0  ...       0   \n",
              "\n",
              "        Finance  Geospatial  Health Care  Homeland Security  Hospitality  IT  \\\n",
              "0             0           0            0                  0            0   1   \n",
              "1             0           0            0                  0            0   0   \n",
              "2             0           0            0                  0            0   0   \n",
              "3             0           0            0                  0            0   0   \n",
              "4             0           0            0                  0            0   0   \n",
              "...         ...         ...          ...                ...          ...  ..   \n",
              "374357        0           0            0                  0            0   0   \n",
              "374358        0           0            0                  0            0   0   \n",
              "374359        0           0            0                  0            0   0   \n",
              "374360        0           0            0                  0            0   0   \n",
              "374361        0           0            0                  0            0   0   \n",
              "\n",
              "        Other Economic Sector  Retail  Transportation  \n",
              "0                           0       0               0  \n",
              "1                           1       0               0  \n",
              "2                           0       0               0  \n",
              "3                           1       0               0  \n",
              "4                           0       0               0  \n",
              "...                       ...     ...             ...  \n",
              "374357                      0       0               0  \n",
              "374358                      0       0               0  \n",
              "374359                      0       0               0  \n",
              "374360                      0       0               0  \n",
              "374361                      0       0               0  \n",
              "\n",
              "[374362 rows x 74 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74349398-b7be-48d8-8510-69262b86d7dc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A-3</th>\n",
              "      <th>A1/A2</th>\n",
              "      <th>AOS</th>\n",
              "      <th>AOS/H-1B</th>\n",
              "      <th>B-1</th>\n",
              "      <th>B-2</th>\n",
              "      <th>C-1</th>\n",
              "      <th>C-3</th>\n",
              "      <th>D-1</th>\n",
              "      <th>E-1</th>\n",
              "      <th>...</th>\n",
              "      <th>Energy</th>\n",
              "      <th>Finance</th>\n",
              "      <th>Geospatial</th>\n",
              "      <th>Health Care</th>\n",
              "      <th>Homeland Security</th>\n",
              "      <th>Hospitality</th>\n",
              "      <th>IT</th>\n",
              "      <th>Other Economic Sector</th>\n",
              "      <th>Retail</th>\n",
              "      <th>Transportation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374357</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374358</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374359</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374360</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374361</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>374362 rows × 74 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74349398-b7be-48d8-8510-69262b86d7dc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-74349398-b7be-48d8-8510-69262b86d7dc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-74349398-b7be-48d8-8510-69262b86d7dc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "id": "VG0_5eniGH9P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aa3b3417-d2a5-4212-ae20-869ce45a3a52"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         Certified\n",
              "1            Denied\n",
              "2         Certified\n",
              "3         Certified\n",
              "4         Certified\n",
              "            ...    \n",
              "374357    Withdrawn\n",
              "374358    Withdrawn\n",
              "374359    Withdrawn\n",
              "374360    Withdrawn\n",
              "374361    Withdrawn\n",
              "Name: case_status, Length: 374362, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Wzri7XuG-OXp"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.) Fit and plot a decision tree of depth 3\n"
      ],
      "metadata": {
        "id": "PeurmqI4-OoC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import tree"
      ],
      "metadata": {
        "id": "udwK0byx-RLA"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = tree.DecisionTreeClassifier(max_depth = 3)"
      ],
      "metadata": {
        "id": "LaHSaUB1h-dD"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8sp9MpCDh-fm",
        "outputId": "86b85f7f-33ce-4323-b28b-a9f091dcb3f9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=3)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (20,8))\n",
        "tree.plot_tree(clf, feature_names = X.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "wL-FSKFdu_HQ",
        "outputId": "fb09f604-855b-4791-88c3-a87bb592ff22"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0.5769230769230769, 0.875, 'H-1B <= 0.5\\ngini = 0.599\\nsamples = 374362\\nvalue = [181933, 148586, 25649, 18194]'),\n",
              " Text(0.3076923076923077, 0.625, 'L-1 <= 0.5\\ngini = 0.642\\nsamples = 91344\\nvalue = [42621, 31744, 11336, 5643]'),\n",
              " Text(0.15384615384615385, 0.375, 'EWI <= 0.5\\ngini = 0.66\\nsamples = 71406\\nvalue = [32675, 22948, 10777, 5006]'),\n",
              " Text(0.07692307692307693, 0.125, 'gini = 0.656\\nsamples = 69451\\nvalue = [32163, 22396, 9963, 4929]'),\n",
              " Text(0.23076923076923078, 0.125, 'gini = 0.677\\nsamples = 1955\\nvalue = [512, 552, 814, 77]'),\n",
              " Text(0.46153846153846156, 0.375, 'IT <= 0.5\\ngini = 0.555\\nsamples = 19938\\nvalue = [9946, 8796, 559, 637]'),\n",
              " Text(0.38461538461538464, 0.125, 'gini = 0.548\\nsamples = 17157\\nvalue = [8700, 7536, 440, 481]'),\n",
              " Text(0.5384615384615384, 0.125, 'gini = 0.589\\nsamples = 2781\\nvalue = [1246, 1260, 119, 156]'),\n",
              " Text(0.8461538461538461, 0.625, 'IT <= 0.5\\ngini = 0.583\\nsamples = 283018\\nvalue = [139312, 116842, 14313, 12551]'),\n",
              " Text(0.7692307692307693, 0.375, 'Educational Services <= 0.5\\ngini = 0.576\\nsamples = 238660\\nvalue = [119116, 98790, 10947, 9807]'),\n",
              " Text(0.6923076923076923, 0.125, 'gini = 0.574\\nsamples = 230750\\nvalue = [115639, 95616, 10155, 9340]'),\n",
              " Text(0.8461538461538461, 0.125, 'gini = 0.632\\nsamples = 7910\\nvalue = [3477, 3174, 792, 467]'),\n",
              " Text(0.9230769230769231, 0.375, 'gini = 0.618\\nsamples = 44358\\nvalue = [20196, 18052, 3366, 2744]')]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x576 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABGoAAAHBCAYAAAAxVF2MAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXRUVdr3/e/OQMCEhEkREIGbRmxkCIqGhAwVAogGAigOIARBpRtbtPvV29YXGkewtaWhYTlgQ4sMgijI2IQpKWjmoRUIosJD0AeRCIYQwEgg7OePQwoCFQhjVZLfZ62zVupM+zqVpM5V19lnH2OtRUREREREREREfC/A1wGIiIiIiIiIiIhDhRoRERERERERET+hQo2IiIiIiIiIiJ9QoUZERERERERExE+oUCMiIiIiIiIi4idUqBERERERERER8RMq1IiIiIiIiIiI+AkVakRERERERERE/IQKNSIiIiIiIiIifkKFGhERERERERERP6FCjYiIiIiIiIiIn1ChRkRERERERETET6hQIyIiIiIiIiLiJ1SoERERERERERHxEyrUiIiIiIiIiIj4CRVqRERERERERET8hAo1IiIiIiIiIiJ+QoUaERERERERERE/oUKNiIiIiIiIiIifUKFGRERERERERMRPqFAjIiIiIiIiIuInVKgREREREREREfETKtSIiIiIiIiIiPgJFWpERERERERERPyECjUiIiIiIiIiIn5ChRoRERERERERET+hQo2IiIiIiIiIiJ9QoUZERERERERExE+oUCMiIiIiIiIi4idUqBERERERERER8RMq1IiIiIiIiIiI+AkVakRERERERERE/IQKNSIiIiIiIiIifkKFGhERERERERERP6FCjYiIiIiIiIiIn1ChRkRERERERETET6hQIyIiIiIiIiLiJ4J8HYCIiIjIlVClSpV9v/76a21fxyFSGpUrV87Oz8+/0ddxiIiI/zHWWl/HICIiInLZjDFWeY2UFcYYrLXG13GIiIj/0a1PIiIiIiIiIiJ+QoUaERERkTLK7XYzdOhQz+tHH32UnTt3Fltn4cKF3HrrrcTGxnrmvfzyy7Rq1QqXy0VycjL5+flXNK7Dhw/TtWtX2rVrx6RJk85Z3rRpU1wuFy6Xi6+++uqKti0iIlLWqVAjIiIiUo61bduW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JDk5GaDEwYzP5O04SnJ2G1u3bmXDhg107tyZLVu28Pvf//6C7YmIiHhlrdWkSZMmTZo0aSrzk5PWnLZgwQIbGhpq8/LyrLXWTpgwwbZs2dKmpqbayMhIa621L730kl2yZInNy8uzMTExtmvXrrZHjx42IyPDnjx50j711FM2MTHRJiYm2jlz5tiL1a9fP7tjxw5rrbXff/+9TUpKshERETYpKclmZWXZrKwsGx8fb+Pj422PHj3ssWPHvK63ceNG63K5bGJiol24cKG11trZs2d7tn3sscdsYWGh13k7duywjz/+eLG4vLVRJCsryz7yyCOen8+O75///Ke98847bVRUlB09erS11tqDBw/aTp062YSEBNuhQwf7888/W2utffbZZ21CQoK9//777bFjx7zGMmLECHvTTTfZhIQEm5CQYHft2mUXLFhgb7/9dhsdHW2ff/55z7p///vfbVxcnL377rs9bRRp166dtdbawsJCm5CQYNu3b2+HDx/uWZ6QkHDO7+eBBx6wderUsTExMXb27Nn2+PHj9v7777cJCQk2Li7O7ty50+t6JbVxZlvHjx8/J7Yznfp79fn/jSZNmjRp8r/JWOv9sY0iIiIiZYkxxvpbXvPcc8+xdu1aFixYQEREhE9imDlzJtWrV6d9+/Y+ad8fYjlw4ABjx47llVdeuabtgvN47ipVqvDpp58Wm2+MwVprSthMREQqMBVqREREpFzwx0KNSElUqBERkZJojBoRERERERERET+hQo2IiIiIiIiIiJ9QoUZERERERERExE8E+ToAERERkSuhcuXK2caY2r6OQ6Q0KleufOFnpouISIWkwYRFRESkwjLGVAV6AH2BNsAsYDKwwlp70pexiX8xxhggCudv5UHga2AKMMNae9CXsYmISPmiQo2IiIhUKMaYIKADzhfuZOA/OMWZedbafF/GJmWDMaYS0Bnnb6gTsBSnaPNva+0xX8YmIiJlnwo1IiIiUu6d6g3RGueLdS/gO5zizCfW2v2+jE3KNmNMNaAnzt/WbcCnOEWb1XpevIiIXAoVakRERKTcMsY0AHrjfImujPMFeoq19lufBibl0qm/t0dw/t4qAVOBydbaHT4NTEREyhQVakRERKRcMcZEcLqHQwucHg6TUQ8HuUZO9eC6Hedv8GFgN06RcLq19oAPQxMRkTJAhRoREREp806N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LmgcAe4D4q21P/gwPBG5SlSoERERnzLGRABbccac+RmYhDPuzLc+DUxERMSPGGMaAI8AjwJ1gF+BO6y13/syLhG58gJ8HYCIiFR49YFjwI9AVeBPQIFPIxIREfE/h4D/D7ge2HfqdROfRiQiV4V61IiIiF8xxoRYa4/5Og4RERF/o3OkSMWgQo2IXLIqVars+/XXX2v7Og6pOCpXrpydn59/o6/jEBERuVzKo6SsUP517alQIyKXzBhj9Rki15IxBmut8XUcIiIil0t5lJQVyr+uPY1RIyIiIiIiIiLiJ1SoERE5D7fbzdChQ70uO378ONHR0YSFhbFz584r3vbevXtp3749MTExLF269JzlERERuFwuXC4XOTk5V7x9ERERkautKNfq378/LpeLatWqkZCQgMvl4tChQ1esnczMTGJjY2nXrh1btmwptmz37t3Url0bl8tFp06drlibIpcqyNcBiIiUVUFBQcyePZs///nPpd7m6NGjhIaGlmrdv/71r7z22mu0atWKLl260KFDh2LLW7RogdvtvpiQRURERPzShx9+CIDL5WLp0qUEBV34q+ovv/zCddddV6r9/+Uvf2HatGkEBATw5JNPMmfOnGLLO3bsyJQpUy4+cJGrQD1qREQukTGG2rUvPAZgfn4+EydOpEOHDuckBeezdetWYmJiCAsLo2rVquTl5RVbvn37duLi4njhhRfQPe4iIiJSERw6dIixY8eSkJDAunXrSr3dwYMHqV+/PvXq1SM3N/ec5RkZGcTFxTFq1KgrGa7IJVGPGhGRqyQrK4sxY8awbds2evbsyeeff07VqlUBePLJJ/nqq6+KrT927FhatGjheV1YWIgxzrhtERER5ObmEh4e7lm+Y8cOqlevzu9//3vmzZtHSkrKNTgqERERkWtv69atjBkzhh9//JHevXuzePFiQkJCALjvvvvOuQ38008/5frrr/e8PnnypOfnsy9w1alTh2+//ZaQkBC6detGUlISLVu2vIpHI3J+KtSIiFyEJUuWMHz4cCIjIxk9evR51924cSPLli3jmWee4eGHHy52y9O77757wbYCAk53eszLy6NatWrFlteoUQOA7t2788UXX6hQIyIiIuVWRkYGmzdv5rnnnqN79+5UqlTJs2zWrFkX3L7o4hcUz7EAQkJCPEWfLl26kJmZqUKN+JRufRIRuQgd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bxMcHMx3333Hk08+yYIFCwAYP348LVq0KLZfb/NEREREKoIxY8bQqFEjlixZwqhRoxg5ciSjRo3C7XZjjKFz585069bNa271l7/8hWnTphEQEMCTTz7JnDlzvOZl3vYncjHUo0ZEKoTVq1cTFRVFYmIiEyZM4Pjx4yQlJREfH8/9999PYWEhu3fvJi4ujp49exIZGcm0adPo1KkTsbGxHD16lN27d9OuXTtSUlJo27YtWVlZxdpYt24dLpeLdu3a8eGHHwLQr18/EhISSExM5OTJkxcV888//8xNN91EYGAgrVq1Ys2aNQDUrl272OMrAc9TE44cOUKrVq0A5/GVa9eupV27dp71vM0TERERuVhlMbcCPE/GDA4OJjAwEIDGjRtz9OhRjhw5Qnh4uGc5FM+tDh48SP369alXrx65ubmA97zM2/5ELoZ61IhIhbBw4ULefPNNXC4XRfeDz58/nypVqjB06FDS09Np0qQJR44cYfny5UyfPp3p06ezePFiRowYwaJFi7j99tvJyclh+fLlbNq0iTfffJP333/f08awYcOYO3cuVatWpWPHjvTu3Zs9e/awfPlyrLXFTuIFBQXnPOIxMDCw2NWYWrVqkZWVxdGjR1m9ejUHDx487zH26NGD9evXM3nyZAAmTpxInz59WLdunWcdb/NERERELlZZzK2KFBYW8vrrrzNu3DjAyaFat26NtdZTECqaf2ZudWZh6HzjC5W0P5HSUqFGRCqEQYMG8frrrzN+/HiefvppmjVrxsCBA/nhhx/Izs6mSZMmNGnShGbNmhEQEEDdunVp3rw5AHXr1vUUSVq0aEFQUBCRkZHs3LmzWBubN28mJSUFgAMHDnDgwAH69etHnz59aNCgAa+99hoBAU5HxkqVKuF2u88bc2BgIMOGDePee++ldevW3HLLLedd//PPP2fPnj307NmTlStXsmjRImbOnOkpypw4ceKceSIiIiKXoizmVkWeffZZUlNTady4MQCvvvoqX331FQD33nuvp+BzZm61du3aYoWhona9KWl/IqWlQo2IVAjVq1fn3XffZe/evTz22GM8/vjj3HLLLXz88ccMGTLEc1XkzBPwmT8XLc/MzKSwsJDNmzd7Tu5FWrduzWeffUZoaCjHjx8nICCAXr16kZqaysCBA9mwYQNRUVFA6a/6pKSkkJKSgtvtZv369SUe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W7VsVqxYQUREBDabzSqKrIqG2rVrWwW1d+3ale32ywtiO5MXBaUDAwOt4+/YsYPatWs7PZaIWKvsVq5cmfPnz+fyTIsQV68xrpvjZn9JVF6x2WwSHx8vGzdulIEDBzrctmnTJhk5cuRV24qCS+87l7//ddPNnTbNx9ldKadGR0fLiBEjHNoOHz4sPXv2zLafoKCgfI0zP2ie1E03x01zZN651tyala+vr1y4cEGSkpKkS5cukpaWlt/hupXrzc2F7f37999/S/v27aVFixbSuXNnmTlzpsNncNbP3bCwsGxt12LFihXi7+8vNptNfv/9dxERefbZZyUtLU1SU1PliSeekNDQUOnXr5+IiBw9elQiIyPFy8tLIiMj5fDhw3L48GEJDQ2V0NBQ6dSpk1y8ePEGzt795MU1g46oUTfdxYsX6dChA61ataJ79+7MmDGDI0eO0KtXLwD8/f3p27cvPj4+LF26FLAXn7pWSUlJlC5dmvLly+Pn58fevXsdbl+0aBFnzpwhPDyc1157Lcc2pZRyZ+6SUwFmz55NSEgIs2fPttqio6MJCQnhvffes9r2799PSEgIL730UuYFs1JKuRV3z60Ahw4dwtvbm3LlyrFhwwY8PDxo3bo1jz32GImJiddx1qqgylzhbNmyZdx6663cdddd1KpVi5kzZwI4FA3OnN50rYWEMzVr1owNGzYQHR3NnXfeCcD777+Pp6cnxYoV49NPP2XNmjVWLZw77riDlStXEhcXx8qVK6lVqxa1atVizZo1rFmzhrlz51KiRIkbOPvCSTtq1E3nzsWuclsASyml3IW75NSHHnqIAwcOsHTpUiZOnMjp06epXr06v/76K9HR0axcudIaDn3w4EHWrl3LuXPnWLhw4Y0+BUoplefcObdmmjt3Lp06dQLs17XHjx9nyZIlBAYG5hiTKrzatm1LUFAQSUlJBAQEuDocdYO0mLC66dy52FVuC2AppZS7cJecWq5cOQCKFy9OaGgoBw8eJDAwkJIlSwLQrl079uzZwwMPPGDNS4+KimL79u106NAhF2eqlFI3jzvn1qpVqwKwcOFC5s6da+0nODgYT09PIiIieOedd3JxlqowWbZsmatDUHlIR9Som86di13ltgCWUkq5C3fJqZlfNNLT09myZQu1atXiwoUL1u3r16+nTp06JCYmWr8YZ7YppZS7cefcCvbCxiVKlKBy5coANG3alP379wN6Dauu7nqm6V2L48ePU7p0aX777bcc2x5++GHCwsIIDg7ml19+AcBmsxEWFobNZmP16tUAfPvtt/j6+uLn58f8+fPzNW53oiNq1E0XFRVFt27daNmyJeXKlaN48eLXvI/c/EIBMGLECJo3b06pUqX47LPPABg6dCjvvvsu7dq1o2/fvoSFhXHvvfcSGBhIWlpatjallHJn7pJTv/nmG6ZOnYqHhwc9evSgRo0a/PDDD7z88suULFmSkJAQ/Pz82LFjB3369KFcuXLUrl2b0aNHX3O8SimV39w5twLMnz+fjh07WvuoWrUqYWFhhIaGUqZMGb788strjlepvPL+++/j5+d3xbZZs2ZRvHhx1qxZw8SJE/nwww8BWLVqFcWK/a+b4r333iMmJgZjDK1atXJ43xdmRov4uRdjjBSF1yQtLY1ixYoxYMAAevfurfMoXcwYg4iYq99TqaKjIOVjzan5T/OkUo4KUo68Xppb3d/15uaC8P796aefeO655yhTpgy9evWid+/etGrVitTUVKpWrco333zDH3/8wWOPPYa3tze//fYbw4YN49NRHs8TAAAgAElEQVRPPyUpKYlly5Zx+vRpevbsSeXKlTl16hSzZ8+mdu3aBAcHs27dOjZt2sSwYcNITU3l6aef5sknn+Txxx/nyJEjeHh4sGrVKjw8rm0SzpkzZ3j55ZdJTk5m5MiR3H333U7bMi1evJhjx47Rv39/IiIiyMjIoFq1akyePJlKlSrx2GOPMWHCBAD69OlTIGrb5cU1g46oUS7Rtm1bEhISuPvuu/VDTymlbpDmVKWUynuaW5UrLVmyhLfeegubzWZNr1u0aBGlS5dm5MiRrF69mrp165KQkMCaNWv46quv+Oqrr1i+fDljx45l2bJlNGnShLNnz7JmzRq2bdvGW2+9xccff2wdY9SoUSxYsIDy5cvTvHlzHn30UY4dO8aaNWsQEYcpfikpKbRo0cIhRk9PT1atWuXQ9v777zNo0CDefvvtK7alpKQQERFBbGws33//PQBz5syhUqVKfPnll7zxxhtMmDCBTp060bhxY0SETz/9NO+eYDenHTXKJbTYlVJK5R3NqUoplfc0typXGjBgAG+88QbTpk1jyJAh1K9fn379+vHnn39y8uRJ6tatS926dalfvz4eHh7UqFGD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Hp2vx7hZ57Zo0SK+/fbbPN+vdtS4MXctatWvXz9+/fVXjh07xvbt2wHnha4ye0kvL+i0cOFCOnToYP1dqVIljDFERUVZBaeccVaESkTo06cPY8aMoWLFinh6ejJq1CjatGnD4sWLqVevHmlpaSxbtozWrVs77O+1115j37597N+/n9dee+2K55xV1sJZgMMvJ/Pnz6djx44O94+JibF+uch08OBBbrvtNsqUKZPjcTLngdatW9fpsTOLduXUFhYWRrFixQgICHD6S4hSKvfcMR/37duXn376idatW1OjRg28vb2dFg/MnP9fokQJ67G5LbrnrHhgpqy53MfHhwYNGhAeHk58fLxVtLBp06aUKVPmqoX9nH0OZObATp06sWfPHqf53RkvLy/q169P1apVuf/++/nrr78AKFGiBOvWrePbb79l1KhR1v2d5W2l1LVxxxyZW85yaW5d6Xr3ase40fyam4KyOcV8+WOdHeNKhVOvNiq8atWq9OrVi2bNmnHw4EG8vb2Jj49n5syZHDx4kE2bNvHSSy9d8zW1UkWJdtS4MXcsanXx4kUAPDw8KFu2LKVLl3Za6CowMNBaji1rQacTJ05QokQJa3hnYmKi1XueteCUs6JWzopQjRo1iqCgICIiIqy2Dh06sGbNGqKioggJCeHkyZMcPXqUVq1aMXPmTIYPH865c+coWbIkZcqUoWzZslahqlOnTllF1XJStmxZkpOTSUhIYPPmzQ7xzJs3z2G0ENg/zK7WduHChWyF4DL/PnPmjFU4LbNoV3p6Ojt27ODee+912pb1+d+9ezc1a9a84jkppa7MHfNx2bJlmTlzJkuWLCEjI4OAgACnxQP37NnDggULaNWqFXv37mXkyJG5Lronkr14IGTP5WDPx9HR0VSuXJm2bdtSt25dTp06ZeWmnI7h7HMgJSXF+rzJ+tlweX6H7Hm7TJkylCtXjqSkJP78808qVKiAiFj3ySxGmMlZ3lZKXRt3zJG55SyX5paz6920tLRsI5mdHeNG8mu9evXYs2cP6enpDgVlc1MUtmnTptbomayPvfwYVyqcunz5cofR7c6O27dvX2JiYqhfvz5t27bFw8ODMmXKUKJECby8vEhMTLzma2qlipQbLXKjW/4WZnO3olYfffSRhIWFSXBwsIwcOVJEci509fzzz0tYWJh06dJFLl68KCIiH3/8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9uxh9uzZNGvWjBdeeKEG9oIkgyjnarFp06YxaNCgUq8PWiapLyr5GnQczc/PZ86cOfTs2TPxuuOPP5758+dz0kknsWTJErp3734gH1+STJTzNSg3O3bsyBtvvAFAXl4eW7ZsOdBdIEkiyrlarOx5//HHH0/8MJf6JSr5WlHb9cEHH6Rjx44cdthhNG7cOPH6V199leOOO46DDz54vz+7SHU0DDuAKFq9enWpq1JltWnThm9961sAFTaEGjVqxJw5cyrdTqtWrdi6dWvi/2lpaeWez87OBiAnJ4fly5dz2mmnAfGKb1ZWFitXriz1up49e7JkyZIqfEpJBVHPVXdn3rx5/OEPfyj1+pdeeolp06ZV/uEk5UQlX4uv6JY8jn7wwQdcfPHFpV73+OOP079/f37xi19wxx138NRTT5Ub00ZSV5Tz9d///ne53Bw6dCizZ88mNzeXb3/727Rt27bKn1WSW5RztU2bNkDp837xuCGNGjWqwqeTVBOVfK2o7Tpy5Eguv/xyzj//fN5++21OPfVUVq1axYQJE3j55Zer/DlFDpR61ATo0KED7777LgDvvPNOuedL3sIRvwWwvKpUeps3b86uXbvYvn07ixYtolOnTqWe7969e2L7S5cupUOHDokDTmFhIYsXL+bb3/524OukfohyrgIsXryY0047rdTJcf369TRq1Ei3kdRDUcnXoOPohx9+yP3330+fPn147733mDhxIu7OoYceCsDhhx/O119/vf8fXpJOlPM1KDfT0tKYOHEis2fPJi0tjd69e+//h5ekEuVchfLn/WXLlvHiiy8mjrdjx47dvw8uSSkq+RrUdi2eNKBBgwY0b96cpk2bsm3bNi699FImT55M8+bN9/+Di1STetQEGDhwID/84Q/p3bs3LVq0SNyvWB1VqfQCjBkzhrPPPpsmTZrw+OOPA3Dddddx55130q9fP6644gqys7M58cQT6d69Ow8//DAPPvggDRo04KKLLqJ9+/a0b9+epk2bEovFOPzww7n++uurHa8kpyjnKsDzzz/P+eefX2o9L7zwAuedd16145TkF5V8nTJlSrnj6O9+97vEezMyMhg9ejRbtmzhRz/6EU8++SQHHXQQf/3rX6sdrySvKOfrxRdfXC43P/vsM4YOHUqDBg0YNmwYRx55ZLXjleQU5VyF8uf9a6+9lmuvvRaIH29vu+22ascrySsq+RrUdn3ggQf4y1/+QmFhIbFYjBNPPJHf/va3rF69mssuuwyARx99VBfFpU5YRZXKaq3EzGtiPVFSUFBAw4YNufrqqxk2bBjp6elhh1RvmRnubvt+Zd2JUs4rV2tGFPOsOqKUk5VRvta+qOdysuQqKF/rQl3kazLl3P5Srkafcv2/lK+1L+ptAdk39aipQN++fdm+fTvf/e53dfCQSFOuSjJRvkoyUb5KslCuSjJRvorsm3rUSORFsSKsnE89Ucyz6lBOSrGo57JyVUpSLwOpL5TrUpei3haQfdNgwjUgIyOj1ta9Zs0a+vXrR05ODpMnTwbgySefJD09nT59+rB+/frEa3ft2sURRxzBrFmzALj00kvp2rUrsViMp59+GoBHHnmEDh06aEpEqdW8veaaa2jTpg0PP/xwYllQ3gbl6C233ELnzp2JxWLcddddtRajRF9d52jxgISnnnoqAwcOBGDcuHG0b9++1GCXQXl73XXXJd4fNN2o1B+1mbf9+/cnMzOT3Nxc1q5dC8CQIUOIxWKkp6cnZlB544036Nq1K926deOBBx4AdP6Xus/Nn/3sZ2RnZ9O1a1fefPNNID6QcEZGBj169EgM5BqUw0FtgW3bttG/f3969OjBE088UWufRaKrNnM4qA0wc+ZMunXrRk5ODh988AEQfCxdt24dPXv2pHv37onfYSIHzN0P+BFfTf3Vo0ePWlv30KFDfePGjYn/5+fne7du3bygoMCXLFni1113XeK5e++913v16uUzZ850d/fhw4f7ypUrS61v06ZNvnLlSh86dGitxVzTivKrRnK1ph6pkPO1mbfr1q3zRx991B966CF3rzhvg3L0V7/6VSKH+ZvuUwAAIABJREFU61IU86w6j1TIybLqMkdLuuuuuxLL169f76+//rqPGTMm8XxQ3hb717/+FfrxNeq5nIq5WlJt5u2qVavc3f21117zn//856WemzZtWiJP+/fv72vWrPHCwkI/66yz3D265/+6yNdUz7mqquvc3LNnj7u7f/LJJ37uuee6u/vAgQP9008/9bVr1/qAAQNKraNkDge1Be68805/6qmnvKCgwDMzM3337t219nlqg3L9wNVmDhcr2QbIyMjw7du3+7p16/zCCy909+Bj6ejRo33evHm+bds2z87OrvUYqyLqbQE99v2oNz1q3nrrLbp27ZromZKfn09ubi5ZWVkMHjyYwsJCPvnkEzIzM7ngggvo0qULzzzzDOeccw4ZGRns2LGDTz75hB49ejBgwAC6devG6tWrS21j4cKFxGIxevTowaOPPgrA8OHDyc7OJicnh71791Yr5vz8fNasWcOVV15J7969WbFiBV9++SVHHXUUaWlpdO7cmfnz5wPxaeoWLFhAjx49Eu83M4YNG0b//v1Zs2YNEJ/Gs2FDDU2ULJIxbwHatWtX6v8V5W1QjgL88pe/pFevXixdurTa25a6lSo5WtKLL76YmKGkbdu2paYKhYrzFoJnOpPoSda8LZ5p5KCDDiItLa3UcyVzr2PHjnz99dfs3r07MZ2szv/JIZVys3g2n+3bt9O5c2cAvvrqK44++miOPPJItmzZUmodZY+fZdsCCxYs4Oyzz060JYp7OEi0JGsOFyvZBoD4NN/t2rXj448/BoKPpe+++y7du3enRYsWHHzwwYmp6kUOSE1Ue0iC6u3YsWM9Ly/P3d337t3re/fu9Z07d7q7+5gxY/y1117z1atXe5cuXbywsND//Oc/Jyr948aN8+eee85Xr17tJ554oufn5/uCBQv8yiuvdPf/VnfPOecc//rrr33v3r2em5vr33zzjffs2TOxzZJ2797t2dnZpR7Fry22bt06b9mypW/cuNGXLVvm5513nhcUFPjpp5/u27dv99dee81POOEEd3efNGmS/+1vfyt1BeLLL790d/d//OMfPnjw4MR6V69eHbkrapUhghXhusr5ZMzbYiV7K1SUt0E5WrxsxYoVnpGRceA7sYqimGfVeYR1HE6VHC22YcMGz8nJKbUsLy+vVI+aio6t7u5nnnmm79ixo2o7r5ZEPZej0GZI5rwtKCjw3Nxc/+ijjxLL9uzZ4126dEn8/8033/QjjzzSjznmGJ88eXJieRTP/3WRr1HIuapKtdwcOHCgt2/f3mfPnu3u7pmZmYnnSv67bA4HtQXOPvts37VrV2JfvPHGG1Xer1FQX3I9mXO4bBsgIyPD169f78uXL/dmzZollpc9lpbM5aFDh/qaNWv2a9/VpKi3BfTY96PeXFq5+uqrue2223j44Ye59tpr6dSpEyNHjuSzzz5jw4YNHH/88Rx//PF06tSJBg0a0L59e04++WQA2rdvz1dffQXA97//fRo2bEiXLl346KOPSm3j3//+NwMGDADgiy++4IsvvmD48OFccsklHHvssfzmN7+hQYN4J6ZGjRoxZ86cSmNu1aoVnTp1ok2bNrRp04Yvv/yStLQ0br75Zs4991xOPfVUTjjhBAoKCvj73//Oc889x8KFCxPvP/TQQ4H4/Zw33XRTjexHqVvJmLdBgvIWgnO0eNnxxx9f7e1I3UuVHC32wgsvlLqSFqSiY+vKlSs58sgjadas2X5vX+pGMuftDTfcwLBhwzjuuOMSy+bMmUMsFkv8/6abbmL+/Pm0bduWs88+myFDhigvk0Sq5ebzzz/P2rVrueCCC1iwYEGpHorF24DyORzUFmjVqhVbt26lSZMmbN26ldatW1cpLqlbyZzDZdsAEyZMYMiQIRx77LGl7looq2QuKzelptSbQs0hhxzCfffdx7p16xgxYgSXX345J5xwAk8//TRjxowprkKXOoGU/Hfx88uWLaOwsJB///vfpU5EAKeeeipTp06lefPm5Ofn06BBAy666CKGDRvGyJEjWbx4MV27dgXityqdc845pd6flpbG7NmzE/9v1qwZLVq0YOfOnXz11Ve0bNkSgAEDBjBgwADmzJnDokWL2LBhA59++il9+vTho48+4pVXXuH0008nLS2Nli1b8uGHH+qAkaSSMW8rUjZvIX4yK5ujxcu++OILCgoKqrvLpI6lUo4CTJ8+nfvvv7/S1wTlLcR/kAwaNKhK25FwJWveTp48OXHrXUnPP/88Q4YMKfXe1q1b06hRIxo0aEB+fv7+7iqpY6mUm7t376Zx48a0aNEicQveoYceytq1a2nQoEGiXQvlczioLZCens7s2bO58MILWbp0KSeeeGI1967UhWTNYSjfBkhPTycvL4+VK1fyxz/+scLPfMoppzB//nxOOeWURO6KHKh6U6iZNGkS06ZNY/v27fzyl7+ka9eujBs3jiVLltCqVasqX73/1re+xcCBA9m0aRN//vOfSz1366230r9/f9ydQw89lMmTJzNgwAAKCwtp2bIl3//+9xOvrWp1d+zYsfTu3ZuCggImTpwIwOjRo3nvvfc49thjue+++2jatCmLFy8G4qPkZ2RkcMghh9C/f3+++uorzCxx0Hn55ZcZP348H3/8MYMHD+a5556r0ueWcCRr3o4bN46nn34ad2fdunXcfPPN5fIWYOjQoeVy9Be/+AXLli1j7969jB8/vop7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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iQkXkq5Lu_L4"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5.) Write your interpretation of the largest (by sample size) leaf node\n"
      ],
      "metadata": {
        "id": "6isBwtmL-R4p"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The first split looks at whether or not the US permanent Visa applicant currently holds an H-1B visa or not. If the applicant does not hold an H-1B visa, the tree is then further split depending on whether the applicant holds an L-1 visa or not. On the other hand, if the applicant does hold an H-1B visa at the time of application, the split is then based on whether the applicant is employed in the IT sector or not. \n",
        "\n"
      ],
      "metadata": {
        "id": "CHQHOc6c5bdj"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5gAU63Wc-RWN"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 6.) Using a for loop, make your own train-test split and determine the best max_depth for out-of sample accuracy"
      ],
      "metadata": {
        "id": "aQa3sanl-XUk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "Ux0_DTI1BUEJ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)"
      ],
      "metadata": {
        "id": "R9GOzCPZBUGb"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "max_depths = [1,2,3]\n",
        "outputs = []\n",
        "\n",
        "for md in max_depths:\n",
        "  clf = tree.DecisionTreeClassifier(max_depth = md)\n",
        "  clf.fit(X_train, y_train)\n",
        "  pred = clf.fit(X_train, y_train).predict(X_test)\n",
        "\n",
        "  # Calculate out of sample accuracy\n",
        "  oos_accuracy = accuracy_score(y_test, pred)\n",
        "  outputs.append(oos_accuracy)\n"
      ],
      "metadata": {
        "id": "9QA-y6HCslBR"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "outputs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tOSGvFwIBUIg",
        "outputId": "a8ff4ba0-dbd5-4f7b-c401-a2a7e9894c9a"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.4849411670428592, 0.4849411670428592, 0.4854353371709428]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "max_depth_range = np.arange(1,20)\n",
        "\n",
        "dt = DecisionTreeClassifier()\n",
        "\n",
        "grid = GridSearchCV(dt, param_grid = {'max_depth': max_depth_range}, cv = 5)\n",
        "grid.fit(X_train, y_train)\n",
        "\n",
        "best_max_depth = grid.best_params_['max_depth']\n",
        "\n",
        "dt_final = DecisionTreeClassifier(max_depth = best_max_depth)\n",
        "dt_final.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "vVaHpqf9wHj7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78103976-de5f-4a43-adfa-80a6de4667ca"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=11)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the above results, the best number of levels of the tree is 11. At this level total misclassification error is minimized. "
      ],
      "metadata": {
        "id": "XSpQ_TFp6dCu"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Em8NfyB_JeMs"
      },
      "execution_count": 22,
      "outputs": []
    }
  ]
}
